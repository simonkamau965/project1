# -*- coding: utf-8 -*-
"""paul

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15owuMgH7ZRWdKwk5UxVAOsZVrID_RisX
"""

import kivy
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.widget import Widget
from kivy.uix.floatlayout import FloatLayout
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.graphics import Rectangle, Color
import random

kivy.require('1.11.1')  # Replace with your Kivy version

# Constants
PLAYER_SIZE = 50
PLAYER_SPEED = 5
ENEMY_SIZE = 30
ENEMY_SPEED = 3
ENEMY_INTERVAL = 2  # Seconds between new enemies
GAME_DURATION = 60  # Game duration in seconds

class Player(Widget):
    def __init__(self, **kwargs):
        super(Player, self).__init__(**kwargs)
        self.size = (PLAYER_SIZE, PLAYER_SIZE)
        self.center_x = Window.width / 2
        self.y = 0
        self.velocity_x = 0

    def update(self):
        self.center_x += self.velocity_x

        # Keep the player inside the screen
        if self.right > Window.width:
            self.right = Window.width
        if self.x < 0:
            self.x = 0

class Enemy(Widget):
    def __init__(self, player, **kwargs):
        super(Enemy, self).__init__(**kwargs)
        self.size = (ENEMY_SIZE, ENEMY_SIZE)
        self.x = random.randint(0, int(Window.width - self.width))
        self.y = Window.height
        self.player = player

    def update(self):
        self.y -= ENEMY_SPEED
        if self.y < 0:
            self.player.score += 10
            self.player.enemies.remove(self)

class Game(BoxLayout):
    SCORE_INTERVAL = 10
    ENEMY_COUNT = 1

    def __init__(self, **kwargs):
        super(Game, self).__init__(**kwargs)
        self.orientation = 'vertical'
        self.player = Player()
        self.enemies = []
        self.score = 0
        self.game_over = False

        self.add_widget(self.player)

        self.start_button = Button(text="Start", on_press=self.start_game)
        self.add_widget(self.start_button)

    def start_game(self, instance):
        self.clear_widgets()
        self.add_widget(self.player)
        self.score_label = Label(text=f"Score: {self.score}")
        self.add_widget(self.score_label)
        Clock.schedule_interval(self.update, 1.0 / 60.0)  # Update the game at 60 FPS
        Clock.schedule_once(self.add_enemy, ENEMY_INTERVAL)

    def add_enemy(self, dt):
        if not self.game_over:
            enemy = Enemy(self.player)
            self.add_widget(enemy)
            self.enemies.append(enemy)
            if len(self.enemies) < self.ENEMY_COUNT:
                Clock.schedule_once(self.add_enemy, ENEMY_INTERVAL)

    def on_touch_down(self, touch):
        if not self.game_over:
            if touch.x < self.player.center_x:
                self.player.velocity_x = -PLAYER_SPEED
            else:
                self.player.velocity_x = PLAYER_SPEED

    def on_touch_up(self, touch):
        self.player.velocity_x = 0

    def update(self, dt):
        if not self.game_over:
            self.player.update()
            for enemy in self.enemies:
                enemy.update()
                if enemy.y < 0:
                    self.remove_widget(enemy)
                    self.enemies.remove(enemy)

            # Check for score intervals to increase enemy count
            if self.score >= self.SCORE_INTERVAL:
                self.SCORE_INTERVAL += 10  # Increase the score interval
                self.ENEMY_COUNT += 1  # Increase the number of enemies

            if self.score >= GAME_DURATION:
                self.game_over = True

        if self.game_over:
            self.clear_widgets()
            self.add_widget(Label(text="Game Over"))
            self.restart_button = Button(text="Restart", on_press=self.restart_game)
            self.add_widget(self.restart_button)
            self.exit_button = Button(text="Exit", on_press=self.exit_game)
            self.add_widget(self.exit_button)

    def restart_game(self, instance):
        self.clear_widgets()
        self.__init__()
        self.start_game(None)

    def exit_game(self, instance):
        App.get_running_app().stop()

class LupinGame(App):
    def build(self):
        self.title = 'Lupin Game'
        self.game = Game()
        return self.game

if __name__ == '__main__':
    LupinGame().run()

